#! /usr/bin/python
# Copyright (C) 2016 Nicira, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from eventlet import greenpool
import argparse
import copy
import eventlet
import json
import os
import re
import sys

import ovs.daemon
import ovs.unixctl
import ovs.unixctl.server
import ovs.vlog
from ovn_k8s.common import kubernetes
from ovn_k8s.common import util
from ovn_k8s.common import variables
from ovn_k8s.common.util import ovs_vsctl
from ovn_k8s.common.util import ovs_ofctl

eventlet.monkey_patch()

vlog = ovs.vlog.Vlog("ovn-gateway-helper")

exiting = False
service_cache = {}
node_ports_cache = set()
physical_bridge = ""
br_int_ofport = 0
physical_interface_ofport = 0
conntrack_zone = 64000


def _unixctl_exit(conn, unused_argv, unused_aux):
    global exiting
    exiting = True
    conn.reply(None)


def _unixctl_run():
    ovs.unixctl.command_register("exit", "", 0, 0, _unixctl_exit, None)
    error, unixctl_server = ovs.unixctl.server.UnixctlServer.create(None)
    if error:
        ovs.util.ovs_fatal(error, "could not create unixctl server", vlog)

    while True:
        unixctl_server.run()
        if exiting:
            unixctl_server.close()
            sys.exit()
        poller = ovs.poller.Poller()
        unixctl_server.wait(poller)
        poller.block()


def add_conntrack_rules():
    # table 0, packets coming from pods headed externally. Commit connections
    # so that reverse direction goes back to the pods.
    ovs_ofctl("add-flow", physical_bridge,
              "priority=100, in_port=%d, ip, "
              "actions=ct(commit, zone=%d), output:%d"
              % (br_int_ofport, conntrack_zone, physical_interface_ofport))
    # table 0, packets coming from external. Send it through conntrack and
    # resubmit to table 1 to know the state of the connection.
    ovs_ofctl("add-flow", physical_bridge,
              "priority=50, in_port=%d, ip, actions=ct(zone=%d, table=1)"
              % (physical_interface_ofport, conntrack_zone))

    # table 1, established and related connections go to pod.
    ovs_ofctl("add-flow", physical_bridge,
              "priority=100, table=1, ct_state=+trk+est, actions=output:%d"
              % (br_int_ofport))
    ovs_ofctl("add-flow", physical_bridge,
              "priority=100, table=1, ct_state=+trk+rel, actions=output:%d"
              % (br_int_ofport))

    # All other connections get the 'NORMAL' treatment.
    ovs_ofctl("add-flow", physical_bridge,
              "priority=0, table=1, actions=NORMAL")


def _update_service_cache(event_type, cache_key, service_data):
    global service_cache
    if event_type == 'DELETED':
        service_cache.pop(cache_key, None)
    else:
        service_cache[cache_key] = service_data


def sync_services():
    try:
        services = kubernetes.get_all_services(variables.K8S_API_SERVER)
    except Exception as e:
        vlog.exception("failed in sync_services (%s)" % (str(e)))
        return

    node_ports = set()
    services = services.get('items', [])

    # For each service, we find all the nodeports allocated and add
    # it to 'node_ports'
    for service in services:
        service_type = service['spec'].get('type')
        if service_type != "NodePort":
            continue

        service_ports = service['spec'].get('ports')
        if not service_ports:
            continue

        for service_port in service_ports:
            port = service_port.get('nodePort')
            if not port:
                continue

            protocol = service_port.get('protocol', 'tcp').lower()
            if protocol != "udp" and protocol != "tcp":
                continue

            node_port_key = "%s_%s" % (protocol, port)
            node_ports.add(node_port_key)

    global node_ports_cache
    cache_copy = copy.deepcopy(node_ports_cache)
    if not node_ports_cache:
        # Possibility that the daemon was restarted. We should build the cache
        # 'cache_copy' from 'ovs-ofctl dump-flows'.
        flows = ovs_ofctl("dump-flows", physical_bridge, "in_port=" +
                          str(physical_interface_ofport)).split('\n')
        for flow in flows:
            match = re.search(r"tp_dst=(.*?)[, ]", flow)
            if not match:
                continue

            if "udp" in flow:
                entry = "udp_%s" % (match.group(1))
                cache_copy.add(entry)
            elif "tcp" in flow:
                entry = "tcp_%s" % (match.group(1))
                cache_copy.add(entry)

    # Any additional node_ports are stale and hence deleted.
    for key in cache_copy.difference(node_ports):
        (protocol, port) = key.split('_')
        protocol_dst = "%s_dst" % (protocol)
        vlog.dbg("syncing flows delete: in_port=%d, %s, %s=%s"
                 % (physical_interface_ofport, protocol, protocol_dst, port))
        ovs_ofctl("del-flows", physical_bridge, "in_port=%d, %s, %s=%s"
                  % (physical_interface_ofport, protocol, protocol_dst, port))

    # After a sync, start fresh
    node_ports_cache = set()


def service_events(event):
    service_data = event['object']
    event_type = event['type']
    vlog.dbg("obtained service data is %s" % json.dumps(service_data))

    service_name = service_data['metadata']['name']
    namespace = service_data['metadata']['namespace']
    service_type = service_data['spec'].get('type')

    if service_type != "NodePort":
        return

    cache_key = "%s_%s" % (namespace, service_name)
    cached_service = service_cache.get(cache_key, {})
    _update_service_cache(event_type, cache_key, service_data)

    if event_type != "DELETED" and cached_service:
        return

    service_ports = service_data['spec'].get('ports')
    if not service_ports:
        return

    global node_ports_cache
    for service_port in service_ports:
        port = service_port.get('nodePort')
        if not port:
            continue

        protocol = service_port.get('protocol', 'tcp').lower()
        if protocol != "udp" and protocol != "tcp":
            continue

        protocol_dst = "%s_dst" % (protocol)
        node_port_key = "%s_%s" % (protocol, port)
        if event_type == "DELETED":
            if node_port_key in node_ports_cache:
                node_ports_cache.remove(node_port_key)
            ovs_ofctl("del-flows", physical_bridge,
                      "in_port=%d, %s, %s=%s"
                      % (physical_interface_ofport, protocol, protocol_dst,
                         port))
        else:
            node_ports_cache.add(node_port_key)
            ovs_ofctl("add-flow", physical_bridge,
                      "priority=100, in_port=%d, %s, %s=%s, actions=%d"
                      % (physical_interface_ofport, protocol, protocol_dst,
                         port, br_int_ofport))


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('--physical-bridge', required=True,
                        help="The OVS bridge via which external connectivity "
                        "is provided.")
    parser.add_argument('--physical-interface', required=True,
                        help="The physical interface via which external "
                        "connectivity is provided.")

    # Since our instructions asks to do a 'pip install ovs',
    # for python libraries, we do not know how OVS core
    # utilities have been installed.  So we try to do a best
    # guess.
    if os.path.isfile("/usr/bin/ovs-vsctl"):
        ovs.dirs.RUNDIR = "/var/run/openvswitch"
        ovs.dirs.LOGDIR = "/var/log/openvswitch"
    else:
        ovs.dirs.RUNDIR = "/usr/local/var/run/openvswitch"
        ovs.dirs.LOGDIR = "/usr/local/var/log/openvswitch"

    ovs.vlog.add_args(parser)
    ovs.daemon.add_args(parser)
    args = parser.parse_args()
    ovs.vlog.handle_args(args)
    ovs.daemon.handle_args(args)

    K8S_API_SERVER = ovs_vsctl("--if-exists", "get", "Open_vSwitch", ".",
                               "external_ids:k8s-api-server").strip('"')
    if not K8S_API_SERVER:
        sys.exit("K8S_API_SERVER not set")
    if not K8S_API_SERVER.startswith("http"):
        variables.K8S_API_SERVER = "http://%s" % K8S_API_SERVER
    else:
        variables.K8S_API_SERVER = K8S_API_SERVER

    # Check whether the bridge exists.
    global physical_bridge
    physical_bridge = args.physical_bridge
    bridge_exists = ovs_vsctl("find", "bridge", "name=" + physical_bridge)
    if not bridge_exists:
        sys.exit("physical bridge %s does not exist" % (physical_bridge))

    global physical_interface_ofport
    physical_interface_ofport = int(ovs_vsctl("get", "interface",
                                    args.physical_interface, "ofport"))
    if physical_interface_ofport <= 0:
        sys.exit("physical-interface %s is invalid"
                 % (args.physical_interface))

    # Create a patch port that connects 'physical_bridge' to br-int and
    # vice-versa.
    patch1 = "k8s-patch-br-int-" + physical_bridge
    patch2 = "k8s-patch-" + physical_bridge + "-br-int"
    ovs_vsctl("--may-exist", "add-port", "br-int", patch1,
              "--", "set", "interface", patch1, "type=patch",
              "options:peer=" + patch2)
    ovs_vsctl("--may-exist", "add-port", physical_bridge, patch2,
              "--", "set", "interface", patch2, "type=patch",
              "options:peer=" + patch1)

    global br_int_ofport
    br_int_ofport = int(ovs_vsctl("get", "interface", patch2, "ofport"))
    if br_int_ofport <= 0:
        sys.exit("patch port creation failed to provide a ofport")

    ovs.daemon.daemonize()

    pool = greenpool.GreenPool()
    pool.spawn(_unixctl_run)

    add_conntrack_rules()

    sync_services()

    service_stream = kubernetes.watch_services(variables.K8S_API_SERVER)
    while True:
        try:
            util.process_stream(service_stream, service_events)
        except Exception as e:
            vlog.exception("Failure in service watcher: %s" % (str(e)))
            sync_services()
            service_stream = kubernetes.watch_services(
                                        variables.K8S_API_SERVER)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        sys.stderr.write("Failed operation.\n(%s)" % str(e))
        sys.exit(1)
