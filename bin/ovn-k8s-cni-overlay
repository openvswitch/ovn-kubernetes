#! /usr/bin/python
# Copyright (C) 2016 Nicira, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import ast
import json
import os
import shlex
import sys
import time

import ovs.vlog
import pyroute2

from ovn_k8s.common import kubernetes
from ovn_k8s.common.util import ovs_vsctl
from ovn_k8s.common.util import call_popen

vlog = ovs.vlog.Vlog("ovn-k8s-cni-overlay")

LOGFILE = "/var/log/openvswitch/ovn-k8s-cni-overlay.log"
CNI_VERSION = "0.1.0"
DEBUG = True


class OVNCNIException(Exception):

    def __init__(self, code, message, details=None):
        super(OVNCNIException, self).__init__("%s - %s" % (code, message))
        self._code = code
        self._msg = message
        self._details = details

    def cni_error(self):
        error_data = {'cniVersion': CNI_VERSION,
                      'code': self._code,
                      'message': self._msg}
        if self._details:
            error_data['details'] = self._details
        return json.dumps(error_data)


def setup_interface(container_id, cni_netns, cni_ifname,
                    mac_address, ip_address, gateway_ip):
    try:
        if not os.path.exists("/var/run/netns"):
            os.makedirs("/var/run/netns")
    except Exception as e:
        vlog.warn("failed to create netns directory" % str(e))
        raise OVNCNIException(100, "failure in creation of netns directory")

    try:
        ipdb = pyroute2.IPDB(mode='explicit')
        vlog.dbg("Creating veth pair for container %s" % container_id)
        veth_outside = container_id[:15]
        veth_inside = container_id[:13] + "_c"
        ipdb.create(ifname=veth_outside, kind='veth', peer=veth_inside)
        with ipdb.interfaces[veth_outside] as veth_outside_iface:
            # Up the outer interface
            vlog.dbg("Bringing up veth outer interface %s" % veth_outside)
            veth_outside_iface.up()
            veth_outside_idx = veth_outside_iface.index

        # Create a link for the container namespace
        # This is necessary also when using pyroute2
        # See https://github.com/svinota/pyroute2/issues/290
        vlog.dbg("Create a link for container namespace")
        netns_dst = "/var/run/netns/%s" % container_id
        if not os.path.isfile(netns_dst):
            command = "ln -s %s %s" % (cni_netns, netns_dst)
            call_popen(shlex.split(command))

        with ipdb.interfaces[veth_inside] as veth_inside_iface:
            # Move the inner veth inside the container namespace
            vlog.dbg("Adding veth inner interface to namespace for "
                     "container %s" % container_id)
            veth_inside_iface.net_ns_fd = container_id

    except Exception as e:
        vlog.warn("failed to create veth pairs")
        raise OVNCNIException(100, "veth pair setup failure")

    try:
        # Change the name of veth_inside to $cni_ifname
        ns_ipdb = pyroute2.IPDB(nl=pyroute2.NetNS(container_id),
                                mode='explicit')
        # Configure veth_inside: set name, mtu, mac address, ip, and bring up
        vlog.dbg("Configuring and bringing up veth inner interface %s. "
                 "New name:'%s',MAC address:'%s', MTU:'%s', IP:%s" %
                 (veth_inside, cni_ifname, mac_address, 1400, ip_address))
        with ns_ipdb.interfaces[veth_inside] as veth_inside_iface:
            veth_inside_iface.ifname = cni_ifname
            veth_inside_iface.address = mac_address
            veth_inside_iface.mtu = 1400
            veth_inside_iface.add_ip(ip_address)
            veth_inside_iface.up()

        # Set the gateway
        vlog.dbg("Setting gateway_ip %s for container:%s"
                 % (gateway_ip, container_id))
        ns_ipdb.routes.add(dst='default', gateway=gateway_ip).commit()

        return veth_outside
    except Exception as e:
        vlog.warn("Failed to setup veth pair for pod: %s" % str(e))
        if veth_outside_idx:
            pyroute2.IPRoute().link('del', index=veth_outside_idx)
        raise OVNCNIException(100, "container interface setup failure")


def cni_add(cni_ifname, cni_netns, namespace, pod_name, container_id):
    k8s_api_server = ovs_vsctl("--if-exists", "get", "Open_vSwitch", ".",
                               "external_ids:k8s-api-server").strip('"')
    if not k8s_api_server:
        raise OVNCNIException(100, "failed to get K8S_API_SERVER")
    if not k8s_api_server.startswith("http"):
        k8s_api_server = "http://%s" % k8s_api_server

    # Get the IP address and MAC address from the API server.
    # Wait for a maximum of 3 seconds with a retry every 0.1 second.
    counter = 30
    ip_address = ""
    mac_address = ""
    annotation = {}
    while counter != 0:
        try:
            annotation = kubernetes.get_pod_annotations(k8s_api_server,
                                                        namespace,
                                                        pod_name)
        except Exception as e:
            vlog.err("failed to get pod annotation: %s" % (str(e)))

        if annotation and annotation.get('ovn'):
            break

        counter = counter - 1
        time.sleep(0.1)

    if not annotation:
        raise OVNCNIException(100, "failed to get pod annotation")

    try:
        ovn_annotated_dict = ast.literal_eval(annotation['ovn'])
        ip_address = ovn_annotated_dict['ip_address']
        mac_address = ovn_annotated_dict['mac_address']
        gateway_ip = ovn_annotated_dict['gateway_ip']
    except Exception as e:
        raise OVNCNIException(100, "failed in pod annotation key extract")

    veth_outside = setup_interface(container_id, cni_netns, cni_ifname,
                                   mac_address, ip_address,
                                   gateway_ip)

    iface_id = "%s_%s" % (namespace, pod_name)

    try:
        ovs_vsctl('add-port', 'br-int', veth_outside, '--', 'set',
                  'interface', veth_outside,
                  'external_ids:attached_mac=%s' % mac_address,
                  'external_ids:iface-id=%s' % iface_id,
                  'external_ids:ip_address=%s' % ip_address)
    except Exception:
        vlog.err("Unable to plug interface into OVN bridge")
        raise OVNCNIException(106, "failure in plugging pod interface")

    output = json.dumps({'ip_address': ip_address,
                        'gateway_ip': gateway_ip, 'mac_address': mac_address})
    vlog.dbg("output is %s" % output)
    print(output)


def cni_del(container_id):
    try:
        ovs_vsctl("del-port", container_id[:15])
    except Exception:
        message = "failed to delete OVS port %s" % container_id[:15]
        vlog.err(message)

    command = "rm -f /var/run/netns/%s" % container_id
    call_popen(shlex.split(command))


def main():
    parser = argparse.ArgumentParser()
    ovs.vlog.add_args(parser)

    if DEBUG:
        args = parser.parse_args(['--log-file', LOGFILE, '-vfile:dbg'])
    else:
        args = parser.parse_args(['--log-file', LOGFILE])
    ovs.vlog.handle_args(args)

    try:
        cni_command = os.environ['CNI_COMMAND']
        cni_ifname = os.environ['CNI_IFNAME']
        cni_netns = os.environ['CNI_NETNS']
        cni_args = os.environ['CNI_ARGS']

        cni_args_dict = dict(i.split("=") for i in cni_args.split(";"))
        namespace = cni_args_dict['K8S_POD_NAMESPACE']
        pod_name = cni_args_dict['K8S_POD_NAME']
        container_id = cni_args_dict['K8S_POD_INFRA_CONTAINER_ID']
    except Exception as e:
        raise OVNCNIException(100, 'required CNI variables missing', str(e))

    vlog.dbg("plugin invoked with "
             "cni_command = %s "
             "cni_container_id = %s "
             "cni_ifname = %s "
             "cni_netns = %s "
             "cni_args = %s"
             % (cni_command, container_id, cni_ifname, cni_netns,
                cni_args))

    if cni_command == "ADD":
        cni_add(cni_ifname, cni_netns, namespace, pod_name, container_id)
    elif cni_command == "DEL":
        cni_del(container_id)


if __name__ == '__main__':
    try:
        main()
    except OVNCNIException as e:
        vlog.err(e.cni_error())
        print(e.cni_error())
        sys.exit(1)
    except Exception as e:
        error = {'cniVersion': CNI_VERSION, 'code': 100,
                 'message': str(e)}
        vlog.err("Unexpected exception %s" % str(e))
        print(json.dumps(error))
        sys.exit(1)
