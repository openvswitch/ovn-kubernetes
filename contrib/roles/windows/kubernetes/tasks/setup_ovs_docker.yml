---
- name: OVS Docker network setup | Remove Startup-script if exists
  win_file:
    path: C:\startup.ps1
    state: absent
- name: OVS Docker network setup | Create startup-script
  win_lineinfile:
    path: C:\startup.ps1
    create: yes
    line: |
      # Get Admin rights in case the current powershell doesnt have admin rights
      if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) { Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs; exit }
      $RegROPath = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
      Remove-ItemProperty $RegROPath "OVN_Init_Node" -ErrorAction SilentlyContinue

      # Start-BitsTransfer https://raw.githubusercontent.com/Microsoft/SDN/master/Kubernetes/windows/hns.psm1
      # Import-Module ./hns.psm1

      # # There should be only one transparent network
      # $HNS_NW=Get-HNSNetworks | where {$_.type -eq "transparent"}
      # $HNS_ID=$HNS_NW.Id
      # $OVS_EXTENSION_ID="583cc151-73ec-4a6a-8b47-578297ad7623"

      # Set-HnsSwitchExtension -NetworkId $HNS_ID -ExtensionId $OVS_EXTENSION_ID -state 0
      # # Rename-NetAdapter -Name "vEthernet ({{interface_name}})" -NewName "Management_Interface"
      # ovs-vsctl --if-exists --no-wait del-br br-ex
      # ovs-vsctl --no-wait --may-exist add-br br-ex
      # ovs-vsctl --no-wait add-port br-ex "{{interface_name}}"
      # Stop-Service ovs-vswitchd
      # Set-HnsSwitchExtension -NetworkId $HNS_ID -ExtensionId $OVS_EXTENSION_ID -state 1
      Get-VMSwitch -SwitchType External | Disable-VMSwitchExtension "Cloudbase Open vSwitch Extension"
      ovs-vsctl --if-exists --no-wait del-br br-ex
      Get-VMSwitch -SwitchType External | Set-VMSwitch -AllowManagementOS $false
      Get-VMSwitch -SwitchType External | Set-VMSwitch -AllowManagementOS $false
      ovs-vsctl --no-wait --may-exist add-br br-ex
      ovs-vsctl --no-wait add-port br-ex '{{interface_name}}'
      Stop-Service ovs-vswitchd
      Get-VMSwitch -SwitchType External | Enable-VMSwitchExtension "Cloudbase Open vSwitch Extension"

      Start-Service ovs-vswitchd
      sleep 2
      Restart-Service ovs-vswitchd
      # Clone the MAC addr
      # TODO: this does not work if the mac ends in 99
      Set-NetAdapter -Name "{{ interface_name }}" -MacAddress {{ interface_mac_addr[:-2] }}99 -Confirm:$false
      Set-NetAdapter -Name br-ex -MacAddress {{ interface_mac_addr }} -Confirm:$false
      Enable-NetAdapter br-ex
      # Remove-NetIPAddress -ifAlias br-ex -Confirm:$false
      # New-NetIPAddress -ifAlias br-ex -IPAddress {{ host_internal_ip }} -DefaultGateway {{ interface_default_gateway }} -PrefixLength {{ interface_prefix_length }}
      # Set-DnsClientServerAddress -InterfaceAlias br-ex -ServerAddresses ("8.8.8.8")
      $GUID = (New-Guid).Guid
      ovs-vsctl set Open_vSwitch . external_ids:system-id="$($GUID)"
      ovs-vsctl set Open_vSwitch . external_ids:k8s-api-server="http://{{ kubernetes_info.MASTER_IP }}:8080"
      ovs-vsctl set Open_vSwitch . external_ids:ovn-remote="tcp:{{ kubernetes_info.MASTER_IP }}:6642" external_ids:ovn-nb="tcp:{{ kubernetes_info.MASTER_IP }}:6641" external_ids:ovn-encap-ip={{ host_public_ip }} external_ids:ovn-encap-type="geneve"
    newline: unix
- name: OVS Docker network setup | Make startup script Run
  win_shell: |
    $RegPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
    # HKCU to run after the user logs in
    $RegROPath = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"

    $script = "C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe -noexit C:\startup.ps1"

    Set-ItemProperty $RegPath "AutoAdminLogon" -Value "1" -type String
    Set-ItemProperty $RegPath "DefaultUsername" -Value "{{ host_info.username }}" -type String  
    Set-ItemProperty $RegPath "DefaultPassword" -Value "{{ host_info.password }}" -type String
    Set-ItemProperty $RegPath "AutoLogonCount" -Value "1" -type DWord
    Set-ItemProperty $RegROPath "OVN_Init_Node" -Value "$script" -type String
- name: OVS Docker network setup | Reboot
  win_reboot:
- name: OVS Docker network setup | Wait for startup script 60 seconds
  pause:
    seconds: 60
