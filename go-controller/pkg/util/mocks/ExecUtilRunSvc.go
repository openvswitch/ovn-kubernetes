// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	exec "k8s.io/utils/exec"
)

// ExecUtilRunSvc is an autogenerated mock type for the ExecUtilRunSvc type
type ExecUtilRunSvc struct {
	mock.Mock
}

// Run provides a mock function with given fields: cmdPath, args
func (_m *ExecUtilRunSvc) Run(cmdPath string, args ...string) (string, string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cmdPath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(cmdPath, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...string) string); ok {
		r1 = rf(cmdPath, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, ...string) error); ok {
		r2 = rf(cmdPath, args...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RunCmd provides a mock function with given fields: cmd, cmdPath, envVars, args
func (_m *ExecUtilRunSvc) RunCmd(cmd exec.Cmd, cmdPath string, envVars []string, args ...string) (string, string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cmd, cmdPath, envVars)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(exec.Cmd, string, []string, ...string) string); ok {
		r0 = rf(cmd, cmdPath, envVars, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(exec.Cmd, string, []string, ...string) string); ok {
		r1 = rf(cmd, cmdPath, envVars, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(exec.Cmd, string, []string, ...string) error); ok {
		r2 = rf(cmd, cmdPath, envVars, args...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RunWithEnvVars provides a mock function with given fields: cmdPath, envVars, args
func (_m *ExecUtilRunSvc) RunWithEnvVars(cmdPath string, envVars []string, args ...string) (string, string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cmdPath, envVars)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []string, ...string) string); ok {
		r0 = rf(cmdPath, envVars, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, []string, ...string) string); ok {
		r1 = rf(cmdPath, envVars, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, []string, ...string) error); ok {
		r2 = rf(cmdPath, envVars, args...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
